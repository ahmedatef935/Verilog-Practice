// Code your design here
module behaveSR(input wire s,r,clk, output reg q ,q1);

  always @(posedge clk)
    begin
      case({s,r})
        2'b00 : q = q ;
        2'b01 : q = 0;
        2'b10 : q = 1;
      endcase
      q1 <= ~q;
    end
  
endmodule
      
module gateSR(input wire s,r,clk, output reg q ,q1);
  
  wire out1,out2;  
  and (out1 ,s ,clk);
  and (out2 ,r ,clk);
  nor (q ,q1 ,out2);
  nor (q1 ,q ,out1);
  
endmodule

module behaveD (input wire s , clk , output reg q , q1);
  
  always @(posedge clk)
    begin
      if(s == 0)
        begin 
          q <= 0;
          q1 <= 1;
        end
      else
        begin
          q <= 1;
          q1 <= 0;
    	end
    end
endmodule

module behaveJK(input wire s,r,clk, output reg q ,q1);

  always @(posedge clk)
    begin
      case({s,r})
        2'b00 : q = q ;
        2'b01 : q = 0;
        2'b10 : q = 1;
        2'b11 : q = ~q;
      endcase
      q1 <= ~q;
    end
  
endmodule

module behaveT (input wire s , clk , rst , output reg q , q1);

  always @(posedge clk)
    begin
      if (rst)
        begin 
          q <= 0;
        end
      else
        begin
          if(s == 0)
            begin 
              q <= q;  
            end
          else
            begin
              q <= ~q;
            end
        end
    end
  
endmodule
      
      
